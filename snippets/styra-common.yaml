Styra Link intro:
  prefix: rego__help
  description: Introductory remarks on rego, Styra Link, and VSCode
  scope: rego
  body: |
    # Welcome to the world of rego!
    # The VSCode plugin provides a wealth of
    # ready-made snippets to jump start your rego
    # journey.  There are two types: policy
    # snippets (currently only available for
    # Kubernetes projects) and rego examples,
    # which help you get up to speed with rego
    # itself.

    # To get started with rego examples, open any
    # rego file and start typing `rego` to pop up
    # the list. Select one to add it to your file.
    # Copy the block of inserted code into the
    # rego playground to actually see it execute.

    # To use policy snippets, set up your
    # kubernetes project via the
    # "Styra Link: Initialize" command from
    # VSCode's command palette.
    # As you type in any rego file in that project
    # Intellisense will provide suggestions
    # (try "add" for example).

    # Some useful links:
    #    Rego Language https://www.openpolicyagent.org/docs/latest/policy-reference/
    #    Rego Playground https://play.openpolicyagent.org/
    #    Styra DAS https://docs.styra.com/das

Conjunction of rules:
  prefix: rego_ex_CONDITION_AND
  description: Determine whether all conditions are satisfied
  scope: rego
  body: |
    ###########################################################################################
    # Example: All conditions must be satisfied
    ###########################################################################################

    package example

    # Sample data START
    userData := {
         "role": "admin",
         "reputation": 500
    }
    # Sample data END

    # `is_moderator` is true if reputation exceeds 100 -AND- role is admin

    is_moderator {
      userData.reputation > 100
      userData.role == "admin"
    }

Disjunction of rules:
  prefix: rego_ex_CONDITION_OR
  description: Determine whether at least one condition is satisfied
  scope: rego
  body: |
    ###########################################################################################
    # Example: At least one condition must be satisfied
    # Reference: https://www.openpolicyagent.org/docs/latest/policy-language/#incremental-definitions
    ###########################################################################################

    package example

    # Sample data START
    userData := {
        "role": "customer",
        "reputation": 100
    }
    # Sample data END

    # `is_moderator` is true if reputation exceeds 100 -OR- role is admin

    is_moderator {
      userData.reputation > 100
    }

    is_moderator {
      userData.role == "admin"
    }

At least one meets condition:
  prefix: rego_ex_EXISTS_ONE
  description: Determine whether at least one member of a set meets a condition
  scope: rego
  body: |
    ###########################################################################################
    # Example: At least one member of a set must meet a condition
    # Reference: https://www.openpolicyagent.org/docs/latest/policy-language/#futurekeywordsin
    ###########################################################################################

    package example
    import future.keywords

    # Sample data START
    set1 := {"a-phone", "b-phone", "a-pad"}
    # Sample data END

    set1_has_phone if {          # rule succeeds so evaluates to true
      some item in set1
      endswith(item, "-phone")   # condition succeeds for item `a-phone` or `b-phone`
    }

At least one fails condition:
  prefix: rego_ex_EXISTS_ONE_NEGATED
  description: Determine whether at least one member of a set does NOT meet a condition
  scope: rego
  body: |
    ###########################################################################################
    # Example: At least one member of a set does NOT meet a condition
    # Reference: https://www.openpolicyagent.org/docs/latest/policy-language/#negation 
    ###########################################################################################

    package example
    import future.keywords

    # Sample data START
    set1 := {"a-phone", "b-phone", "a-pad"}
    # Sample data END

    set1_has_some_NON_phone if {    # rule succeeds so evaluates to true
      some item in set1
      not endswith(item, "-phone")  # condition succeeds for item `a-pad`
    }
    
    # For comparison
    set1_has_phone if {             # rule succeeds so evaluates to true
      some item in set1
      endswith(item, "-phone")      # condition succeeds for item `a-phone` or `b-phone`
    }

Every value satisfies condition:
  prefix: rego_ex_EXISTS_ALL
  description: Determine whether all members of a set meet a condition
  scope: rego
  body: |
    ###########################################################################################
    # Example: Every member of a set must meet a condition
    # Reference: https://www.openpolicyagent.org/docs/latest/policy-language/#universal-quantification-for-all
    ###########################################################################################
 
    package example
    import future.keywords

    # Sample data START
    nums := {100, 200, 300}
    # Sample data END

    all_above_50 if {         # rule succeeds so evaluates to true
      every num in nums {     # every-condition succeeds
        num > 50              # condition succeeds for every num
      }
    }

    all_in_target_range if {  # rule fails so variable is undefined
      every num in nums {     # every-condition fails 
        num > 50              # condition succeeds for every num
        num < 250             # condition fails for 300
      }
    }


No value satisfies condition:
  prefix: rego_ex_EXISTS_ALL_NEGATED
  description: Determine whether NO members of a set meet a condition
  scope: rego
  body: |
    ###########################################################################################
    # Example: NO member of a set meets a condition
    # Reference: https://www.openpolicyagent.org/docs/latest/policy-language/#universal-quantification-for-all
    ###########################################################################################

    package example
    import future.keywords

    # Sample data START
    nums := {100, 200, 300}
    # Sample data END

    all_in_target_range if {  # negating multiple is often easier by starting with the opposite...
      every num in nums {     # every-condition fails for this range
        num > 150
        num < 160
      }
    }
    
    all_NOT_in_target_range if not all_in_target_range     # ...then just negate the "helper" result!
 
Generate array based on conditions:
  prefix: rego_ex_CREATE_ARRAY
  description: Generates a filtered array (retaining duplicates, if present)
  scope: rego
  body: |
    ###########################################################################################
    # Example: Generate an array of elements (includes duplicates if present) satisfying a condition
    # Reference: https://www.openpolicyagent.org/docs/latest/policy-language/#array-comprehensions
    ###########################################################################################

    package example
    import future.keywords

    # Sample data START
    array1 := ["a-phone", "b-phone", "a-phone", "a-pad"]
    # Sample data END

    # Square brackets here are the key for array generation (compare to rego_ex_CREATE_SET).
    my_array_of_phones := [         # Output: ["a-phone", "b-phone", "a-phone"]
      item |                        # include each `item` such that...
        some item in array1         # iterates over the input list and...
        endswith(item, "-phone")    # it matches this condition
    ]

    my_array_of_cars := [           # Output: empty array because no item satisfies the condition
      item |
        some item in array1
        endswith(item, "-car")
    ]
 
Generate set based on conditions:
  prefix: rego_ex_CREATE_SET
  description: Generates a filtered set (unique elements)
  scope: rego
  body: |
    ###########################################################################################
    # Example: Generate a set of elements (unique members) satisfying a condition
    # Reference: https://www.openpolicyagent.org/docs/latest/policy-language/#set-comprehensions
    ###########################################################################################

    package example
    import future.keywords

    # Sample data START
    array1 := ["a-phone", "b-phone", "a-phone", "a-pad"]
    # Sample data END

    # Curly brackes here are the key for set generation (compare to rego_ex_CREATE_ARRAY).
    my_set_of_phones := {           # Output: ["a-phone", "b-phone"]
      item |                        # include each `item` such that...
        some item in array1         # iterates over the input list and...
        endswith(item, "-phone")    # it matches this condition
    }

    my_set_of_cars := {             # Output: empty set because no item satisfies the condition
      item |
        some item in array1
        endswith(item, "-car")
    }
 
Generate object based on conditions:
  prefix: rego_ex_CREATE_OBJECT
  description: Generate an object of key/value pairs satisfying a condition
  scope: rego
  body: |
    ###########################################################################################
    # Example: Generate an object of key/value pairs satisfying a condition
    # Reference: https://www.openpolicyagent.org/docs/latest/policy-language/#object-comprehensions
    ###########################################################################################

    package example
    import future.keywords

    # Sample data START
    array1 := ["a-phone", "b-phone", "a-phone", "a-pad"]
    # Sample data END

    # To get an object (rather than an array or set), the element shape is "key:item".
    # Warning! If you generate duplicate keys you will get a runtime error.
    # (Cannot happen in this example since the unique index is part of the key.)
    my_phone_details := {   # Output: {"x-0": "a-phone", "x-1": "b-phone", "x-2": "a-phone"}
      key:item |                          # construct key:value pairs
        some index, item in array1        # iterates over 0:"a-phone", 1:"b-phone", 2:"a-phone", 3:"a-pad"
        endswith(item, "-phone")          # condition succeeds for "a-phone", "b-phone", and again "a-phone"
        key := sprintf("x-%v", [index])   # construct a key of the form "x-n" where n is the index
    }                                   

    my_car_details := {     # Output: empty object because no item satisfies the condition
      key:item |                          # construct key:value pairs
        some index, item in array1        # iterates over 0:"a-phone", 1:"b-phone", 2:"a-pad"
        endswith(item, "-car")            # condition fails for all items in iteration range
        key := sprintf("x-%v", [index])   # construct a key of the form "x-n" where n is the index
    }

Generate array based on negation:
  prefix: rego_ex_CREATE_NEGATION
  description: Generates a negated array (duplicates preserved) from a target list
  scope: rego
  body: |
    ###########################################################################################
    # Example: Generate a list of elements (duplicates included) NOT satisfying a condition
    # Reference: https://www.openpolicyagent.org/docs/latest/policy-language/#array-comprehensions
    ###########################################################################################

    package example
    import future.keywords

    # Sample data START
    array1 := ["a-phone", "b-phone", "a-phone", "a-pad"]
    # Sample data END

    # The square brackets used here are the key for array generation!
    #   > Use curly braces to get a set instead.
    #   > Use the key:item construct shown in rego_ex_CREATE_OBJECT to get an object instead.
    my_set_of_NON_phones := [         # Output: ["a-pad"]
      item |                          # include each `item` such that...
        some item in array1           # iterates over the input list and...
        not endswith(item, "-phone")  # it does NOT match this condition
    ]

    my_set_of_NON_cars := [           # Output: ["a-phone", "b-phone", "a-phone", "a-pad"]
      item |
        some item in array1
        not endswith(item, "-car")
    ]

Condition evaluation:
  prefix: rego_ex_CONDITIONS
  description: Illustrate which conditions pass and which do not
  scope: rego
  body: |
    ###########################################################################################
    # Example: Illustrate which conditions pass and which do not
    ###########################################################################################

    package example

    all_values_other_than_false_succeed {
      true         # literal true
      3 == 3       # true
      "a" == "a"   # true
      3.14         # number
      -1 * 10      # number
      abs(-1)      # number
      "a string"   # string
      upper("str") # string
      [1, "a"]     # array
      {1, "a"}     # set
      {"k": "v"}   # object
    }

    even_falsy_values_succeed {    # i.e., there is no "falsy" in Rego!
      0            # zero
      ""           # empty string
      []           # empty array
      {}           # empty object
      {1} - {1}    # empty set computed by set difference
      null         # JSON null value of type null
    }

    # Just two ways to fail a condition: undefined or actual false
    no_result_1 { false }                     # literal false
    no_result_2 { 1 == 2 }                    # false
    no_result_3 { is_number("a") }            # false
    no_result_4 { input.no_such_field }       # undefined
    no_result_5 { 0 / 0  }                    # undefined
    no_result_6 { to_number("not a number") } # undefined

Negated condition evaluation:
  prefix: rego_ex_CONDITIONS_NEGATED
  description: Illustrate which negated conditions pass and which do not
  scope: rego
  body: |
    ###########################################################################################
    # Example: Illustrate which negated conditions pass and which do not
    ###########################################################################################

    package example

    an_undefined_value { 1 == 2 }

    # negating conditions that fail
    negate_failing_conditions { # every condition in this rule succeeds
      not false
      not 1 == 2
      not input.no_such_path
      not an_undefined_value
    }

    # negating conditions that succeed
    negate_successful_conditions { # every condition in this rule fails
      not true
      not 1 == 1
      not 1
      not 0
      not "str"
      not ""
      not null
    }

Handling conflicts:
  prefix: rego_ex_CONFLICTS
  description: Conflicts cause runtime errors; code to avoid them.
  scope: rego
  body: |
    ###########################################################################################
    # Example: Illustrate run-time error and how to revise code to avoid it
    ###########################################################################################

    package example
    import future.keywords

    # Sample data START
    sample := {
      "user": {
        "is_admin": true,
        "is_super_admin": false
      },
      "path": {
        "is_restricted": true
      }
    }
    # Sample data END

    #------------------------------------------------------------------------------------------
    # first attempt generates a run-time error with the initial input values given above:

    allow_request := true if {    # allow if user is admin
      sample.user.is_admin
    }

    allow_request := false if {   # disallow if path is restricted
      sample.path.is_restricted
    }

    #------------------------------------------------------------------------------------------
    # delete the first attempt and uncomment this second attempt to avoid an error:
    # (experiment with the three boolean inputs above to see varying results)

    # allow_request := true if {      # allow if user is admin
    #   sample.user.is_admin
    #   not sample.path.is_restricted  # except for restricted path
    # }

    # allow_request := true if {      # allow if user is super-admin in all cases
    #   sample.user.is_super_admin
    # }

    # default allow_request := false  # false in all other cases

Partial rule vs. comprehension:
  prefix: rego_ex_PARTIAL_RULE
  description: Illustrates a common use of partial rules and contrasts with comprehensions
  scope: rego
  body: |
    ###########################################################################################
    # Example: Illustrates a common use of partial rules and contrasts with comprehensions
    ###########################################################################################

    package example

    # This example shows how to use a partial rule to re-index a list of users by their user IDs.
    # It is vital that the "id" field of each user be unique among the "users" list;  otherwise,
    # you will get a runtime error about duplicate keys (unless their values are also identical).
    #
    # Partial objects are useful when the mapping from one collection to another is complicated, since
    # long rule bodies are more readable than long comprehensions. Additionally, using partial objects
    # can be a useful performance optimization, since the runtime can skip evaluating the rule body
    # for key values that are never accessed in some circumstances.

    # Sample data START
    users := [
      { "id": "jsmith",  "first": "John",  "last": "Smith"  },
      { "id": "jdoe",    "first": "Jane",  "last": "Doe"    },
      { "id": "acooper", "first": "Alice", "last": "Cooper" }
    ]
    # Sample data END

    # A: Using partial rule formulation
    A_users_by_id[id] = user {
      user := users[_]  # Underscore indicates "any", so this iterates over the elements of `users`.
      id := user.id     # Bind id (of users_by_id) to the "id" field of the current user object.
    }

    # B: Using object comprehension formulation
    B_users_by_id := {
      id: user |
        user := users[_]
        id := user.id
    }

Convert between set and array:
  prefix: rego_ex_CONVERT_OBJECTS
  description: Demonstrates how to convert from set to array and array to set
  scope: rego
  body: |
    ###########################################################################################
    # Example: Demonstrates how to convert from set to array and array to set
    ###########################################################################################

    package example

    # Sample data START
    original_set := {"a-phone", "b-phone", "a-pad"}
    original_array := ["a-phone", "b-phone", "a-pad", "a-phone"]
    # Sample data END

    # Convert set to an array. The order of elements in new_array is arbitrary;
    # for well-defined ordering, consider sorting the array after creating it.
    #
    # This can be read as "x such that x is a member of original_set".
    new_array := [x | original_set[x]]

    # Now we'll show the other way around...
    # This can be read as "x such that x is a member of original_array at some arbitrary index".
    new_set := {x | x := original_array[_]}

Convert types:
  prefix: rego_ex_CONVERT_TYPES
  description: Demonstrates how to convert among boolean, number, and string
  scope: rego
  body: |
    ###########################################################################################
    # Example: Demonstrates how to convert among boolean, number, and string
    ###########################################################################################

    package example

    # string -> number
    num1 := to_number("1")         # 1
    num2 := to_number("3.14159")   # 3.14159

    # bool -> number
    num3 := to_number(true)        # 1
    num4 := to_number(false)       # 0

    # number -> string
    # This can be a bit of a pain point: if you do not choose the correct format string
    # you will get bogus results. Generally, that means use "%f" if it has a decimal point
    # or "%d" if not. These first two show bogus results because of the wrong format string.
    bogus1 := sprintf("%f", [5])              # "%!f(int=5)"
    bogus2 := sprintf("%d", [1.2])            # "%!d(float64=1.2)"

    # If you know the appropriate format verb (see https://pkg.go.dev/fmt) in advance, you can just use sprintf:
    str1 := sprintf("%d", [1])                # "1"
    str2 := sprintf("%f", [3.14159])          # "3.141590"

    # If you don't know the appropriate verb, you can try %v:
    str3 := sprintf("%v", [1])                # "1"
    str4 := sprintf("%v", [3.14159])          # "3.14159"

    # Be wary though, since %v will happily accept _any_ type:
    str5 := sprintf("%v", ["this is not a number"]) # "this is not a number"

    # If you want to ensure you have an integer:
    str6 := sprintf("%d", [round(123.856)])   # 124
    str7 := sprintf("%d", [round(789)])       # 789

Handle optional object keys:
  prefix: rego_ex_OPTIONAL_KEYS
  description: Demonstrates handling objects that may have optional keys 
  scope: rego
  body: |
    ###########################################################################################
    # Example: Demonstrates handling objects that may have optional keys 
    # Reference: https://www.openpolicyagent.org/docs/latest/policy-reference/#builtin-object-objectget
    ###########################################################################################

    package example

    # Sample data START
    obj1 := {
    	"id": "jsmith",
    	"first": "John",
    	"last": "Smith",
    	"friends": ["acooper", "jdoe"],
    }

    obj2 := {
    	"id": "gwolf",
    	"first": "George",
    	"last": "Wolf",
    }
    # Sample data END

    # Suppose the "friends" key is optional. If not present,
    # we still want to return valid data (and specificially an empty list for "friends").

    # This way is WRONG, don't do this:
    # bogus1 := obj1.friends    # this one works fine (returning ["acooper", "jdoe"])...
    # bogus2 := obj2.friends    # ...but this causes a run-time error!

    # The correct way uses object.get(); this ensures that good1 and good2 are always
    # arrays, even if empty, when the "friends" key is omitted.
    good1 := object.get(obj1, "friends", []) # ["acooper", "jdoe"]
    good2 := object.get(obj2, "friends", []) # []
